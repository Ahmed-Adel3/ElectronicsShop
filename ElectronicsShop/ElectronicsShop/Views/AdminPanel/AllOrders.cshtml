@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["ClientsOrders"];
}

<div class="container text-center">
    <div class="row">
        <div class="col">
            <h1 class="display-4">@Localizer["ClientsOrders"]</h1>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="container-fluid">
                <table class="table table-striped table-hover table-sm">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">@Localizer["ProductName"]</th>
                            <th scope="col">@Localizer["ClientName"]</th>
                            <th scope="col">@Localizer["ClientPhone"]</th>
                            <th scope="col">@Localizer["PricePaid"]</th>
                            <th scope="col">@Localizer["Quantity"]</th>
                        </tr>
                    </thead>
                    <tbody id="gridBodyContainer">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="btn-group">
                <button type="button" class="btn btn-primary" id="prevBtn" disabled> <i class="fas fa-arrow-circle-left"></i> @Localizer["PreviousBtn"]</button>
                <span id="navBtnsSpan" class="btn-group"></span>
                <button type="button" class="btn btn-primary" id="nextBtn"> @Localizer["NextBtn"] <i class="fas fa-arrow-circle-right"></i></button>
            </div>
        </div>
        <div class="col">
            <label>@Localizer["Page"] <span id="pageNum"></span> @Localizer["of"] <span id="totalPagesNum"></span> @Localizer["Pages"]</label>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        window.onload = () => {
            loadOrders(1);
        };

        let drawGridRows = returnData => {
            var gridBody = document.getElementById("gridBodyContainer");
            General.emptyNode(gridBody);
            returnData.GridRows.forEach(row => gridBody.innerHTML +=
                `<tr>
                    <td>${row.ProductName}</td>
                    <td>${row.ClientName}</td>
                    <td>${row.ClientPhone}</td>
                    <td>${row.PricePaid}</td>
                    <td>${row.QuantityRequested}</td>
                </tr>`);

            let prevBtn = document.getElementById('prevBtn');
            prevBtn.disabled = returnData.IsFirstPage;
            prevBtn.onclick = loadOrders.bind(this, returnData.CurrentPageNumber - 1);

            let nextBtn = document.getElementById('nextBtn');
            nextBtn.disabled = returnData.IsLastPage;
            nextBtn.onclick = loadOrders.bind(this, returnData.CurrentPageNumber + 1);

            document.getElementById("pageNum").innerHTML = returnData.CurrentPageNumber;
            document.getElementById("totalPagesNum").innerHTML = returnData.TotalPagesNumber;

            General.createNavigationButtons(returnData.CurrentPageNumber, returnData.TotalPagesNumber, "navBtnsSpan", loadOrders );
        }

        let loadOrders = (pageNum) => {
            General.sendAjax("/AdminPanel/GetOrdersGridData", data => drawGridRows(data), { pageNum })
        };
    </script>
}


